<?php

namespace App\Controller;

use App\Entity\Course;
use App\Entity\Feedback;
use App\Entity\Message;
use App\Entity\Notification;
use App\Entity\TraineeCourseFavorite;
use App\Entity\TraineeResource;
use App\Repository\CohortRepository;
use App\Repository\CourseModuleRepository;
use App\Repository\CourseRepository;
use App\Repository\CourseResourceRepository;
use App\Repository\FeedbackCategoryRepository;
use App\Repository\MessageRepository;
use App\Repository\NotificationRepository;
use App\Repository\TraineeCourseFavoriteRepository;
use App\Repository\TraineeRepository;
use App\Repository\TrainerRepository;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Asset\Packages;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Component\ExpressionLanguage\Expression;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\String\Slugger\SluggerInterface;
use Symfony\Contracts\Translation\TranslatorInterface;

class DefaultController extends AbstractController
{
    #[IsGranted(new Expression('is_granted("ROLE_USER")'))]
    #[Route('/', name: 'app_default', methods: "GET")]
    public function index(): Response
    {
        return $this->redirectToRoute('app_home');
    }

    #[IsGranted(new Expression('is_granted("ROLE_USER")'))]
    #[Route('/feedback', name: 'app_feedback', methods: "POST")]
    public function feedback(FeedbackCategoryRepository $feedbackCategoryRepository, EntityManagerInterface $entityManager, Request $request): Response
    {
        $feedback = new Feedback();
        $feedback->setCategory($feedbackCategoryRepository->find($request->request->get('form_feedback_category')));
        $feedback->setAnnotation($request->request->get('form_feedback_annotation'));
        $feedback->setLink($request->request->get('form_feedback_link'));
        $feedback->setWeight($request->request->get('form_feedback_weight'));
        $feedback->setUser($this->getUser());
        $entityManager->persist($feedback);
        $entityManager->flush();

        // Your GitHub personal access token (GPA)
        $accessToken = $_ENV['GITHUB_PERSONAL_ACCESS_TOKEN'];

        // The repository owner and repo name
        $owner = 'marceau07';
        $repo = $_ENV['GITHUB_PERSONAL_REPOSITORY'];

        // The data for the issue (title, body, etc.)
        $data = [
            'title' => "[PAF-" . $feedback->getId() . "_" . $_ENV['APP_ENV'] . "]",
            'body' =>
            "# [PAF-" . $feedback->getId() . "_" . $_ENV['APP_ENV'] . "] " . mb_substr(trim(preg_replace('/\s+/', '...', $feedback->getCategory()->getLabel())), 0, 200) . "\n\n"
                . $_SERVER['HTTP_USER_AGENT'] . "\n\n\n"
                . $feedback->getAnnotation() . "\n\n"
                . "[`link`](<" . $feedback->getLink() . ">)\n\n"
                . "Gravity: " . $feedback->getWeight() . "/4\n\n"
                . "Found by @" . $this->getUser()->getUserIdentifier() . "\n"
                . "Generated by PAF",
            'assignees' => ['marceau07'],
            'labels' => [$_ENV['APP_ENV'], ($feedback->getCategory()->getLabel() == "Problème" ? "bug" : ($feedback->getCategory()->getLabel() == "Manque" ? "help wanted" : "enhancement"))]
        ];

        // Convert data to JSON format
        $jsonData = json_encode($data);

        // Set up cURL
        $ch = curl_init("https://api.github.com/repos/$owner/$repo/issues");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_USERAGENT, 'PHP GitHub Issue Creator');
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Authorization: Bearer ' . $accessToken,
            'Content-Type: application/vnd.github+json'
        ]);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);

        // Execute the request
        $response = curl_exec($ch);
        if (!$response) {
            $message_bis = 'Error:' . curl_error($ch);
        } else {
            $message_bis = 'Response:' . $response;
        }

        // Close the cURL session
        curl_close($ch);

        return $this->json(
            [
                'success' => true,
                'message' => "Votre message a bien été envoyé !",
                'message_bis' => $message_bis,
            ],
            status: Response::HTTP_OK
        );
    }

    #[IsGranted(new Expression('is_granted("ROLE_USER")'))]
    #[Route('/{_locale}/chatbot', name: 'app_chatbot', methods: "POST")]
    public function chatbot(TranslatorInterface $translator, Packages $assets, TraineeRepository $traineeRepository, TrainerRepository $trainerRepository, CourseRepository $courseRepository, Request $request): Response
    {
        $userMessage = strtolower(trim($request->request->get('form_chatbot_message')));

        if (substr($userMessage, 0, 1) === "/") {
            $userMessage = substr($userMessage, 1);
            $closest = [];
            switch ($userMessage) {
                case strpos($userMessage, $translator->trans('chatbot.keys.courses', [], null, $request->getLocale())) === 0:
                    $keywords = explode($translator->trans('chatbot.keys.courses', [], null, $request->getLocale()) . ' ', trim($userMessage))[1];
                    $courses = $courseRepository->findOneBy(['link' => $keywords]) ?? $courseRepository->searchCourses($keywords);
                    if(!empty($courses)) {
                        array_push($closest, 'Voilà ce que j\'ai trouvé pour vous dans les <b>'.$translator->trans('chatbot.keys.courses', [], null, $request->getLocale()) . '</b> avec les mots-clés <b>' . $keywords. '</b>:');
                        foreach ($courses as $course) {
                            array_push($closest, 
                                '<div>
                                    <h6 class="fw-bold fs-5 ">[' . $course->getModule()->getLabel() . ']&nbsp;' . $course->getTitle() . '</h6>
                                    <p class="fs-6">' . $course->getSynopsis() . '</p>
                                    <a class="btn btn-primary text-center" href="/' . $request->getLocale() . '/embed/' . $course->getLink() . '">Consulter le cours !</a>
                                </div>');
                        }
                    } else {
                        $closest = ['Désolé, je n\'ai pas trouvé de cours avec les mots-clés <b>' . $keywords . '</b>...'];
                    }
                    break;
                case strpos($userMessage, $translator->trans('chatbot.keys.modules', [], null, $request->getLocale())) === 0:
                    $keywords = explode($translator->trans('chatbot.keys.modules', [], null, $request->getLocale()) . ' ', trim($userMessage))[1];
                    if($this->isGranted('ROLE_TRAINER')) {
                        $courses = $courseRepository->getCoursesInformationsBySector($keywords);
                        if(empty($courses)) {
                            $courses = $courseRepository->getCoursesInformationsBySector(null, $keywords);
                        }
                    } else {
                        $courses = $courseRepository->getCoursesInformationsByCohort($this->getUser()->getUserIdentifier(), $keywords);
                        if(empty($courses)) {
                            $courses = $courseRepository->getCoursesInformationsByCohort($this->getUser()->getUserIdentifier(), null, $keywords);
                        }
                    }
                    if(!empty($courses)) {
                        array_push($closest, 'Voilà ce que j\'ai trouvé pour vous dans les <b>'.$translator->trans('chatbot.keys.modules', [], null, $request->getLocale()) . '</b> avec les mots-clés <b>' . $keywords. '</b>:');
                        $modules = [];
                        foreach ($courses as $course) if(!in_array($course->getModule()->getId(), $modules)) {
                            array_push($closest, 
                                '<div>
                                    <h6 class="fw-bold fs-5 ">' . $course->getModule()->getLabel() . '</h6>
                                    <img src="' . $assets->getUrl('images/' . $course->getModule()->getIllustration()) . '" title="' . $course->getModule()->getIllustration() . '">
                                    <a class="btn btn-primary text-center" href="/' . $request->getLocale() . '/course/read/' . $course->getModule()->getUuid() . '">Consulter le cours !</a>
                                </div>');
                        }
                    } else {
                        $closest = ['Désolé, je n\'ai pas trouvé de module avec les mots-clés <b>' . $keywords . '</b>...'];
                    }
                    break;
                case strpos($userMessage, $translator->trans('chatbot.keys.users', [], null, $request->getLocale())) === 0:
                    $keywords = explode($translator->trans('chatbot.keys.users', [], null, $request->getLocale()) . ' ', trim($userMessage))[1];
                    $trainees = $traineeRepository->searchTrainees($keywords);
                    $trainers = $trainerRepository->searchTrainers($keywords);
                    if(!empty($trainees)) {
                        array_push($closest, 'J\'ai trouvé ces stagiaires qui peuvent correspondre à ta demande <b>'.$translator->trans('chatbot.keys.users', [], null, $request->getLocale()) . '</b> avec les mots-clés <b>' . $keywords. '</b>:');
                        foreach ($trainees as $trainee) {
                            array_push($closest, 
                                '<div>
                                    <div class="d-flex justify-content-center">
                                        <img src="' . $assets->getUrl('images/avatars/' . $trainee->getAvatar()->getLink()) . '" width="100" height="100" title="' . $trainee->getAvatar()->getLabel() . '">
                                    </div>
                                    <h6 class="fw-bold fs-5 ">' . $trainee->getFirstName() . ' ' . $trainee->getLastName() . '</h6>
                                    <p class="fs-6">' . $trainee->getCohort()->getName() . '</p>
                                    
                                    <div class="d-flex justify-content-center">
                                        <a class="btn btn-primary text-center" href="/' . $request->getLocale() . '/mailbox/trainee/' . $trainee->getUuid() . '"><i class="fa-solid fa-paper-plane"></i></a>
                                        ' . ($this->isGranted('ROLE_TRAINER') ? '<a class="ms-2 btn btn-primary text-center" href="/' . $request->getLocale() . '/trainee/' . $trainee->getUuid() . '"><i class="fa-solid fa-eye"></i></a>' : '') . '
                                    </div>
                                </div>');
                        }
                    } elseif(!empty($trainers)) {
                        array_push($closest, 'J\'ai trouvé ces stagiaires qui peuvent correspondre à ta demande <b>'.$translator->trans('chatbot.keys.users', [], null, $request->getLocale()) . '</b> avec les mots-clés <b>' . $keywords. '</b>:');
                        foreach ($trainers as $trainer) {
                            array_push($closest, 
                                '<div>
                                    <div class="d-flex justify-content-center">
                                        <img src="' . $assets->getUrl('images/avatars/' . $trainer->getAvatar()->getLink()) . '" width="100" height="100" title="' . $trainer->getAvatar()->getLabel() . '">
                                    </div>
                                    <h6 class="fw-bold fs-5 ">[' . $trainer->getSector()->getLabel() . ']&nbsp;' . $trainer->getFirstName() . ' ' . $trainer->getLastName() . '</h6>
                                    <p class="fs-6">' . $trainer->getEmail() . '</p>
                                    
                                    <div class="d-flex justify-content-center">
                                        <a class="btn btn-primary text-center" href="/' . $request->getLocale() . '/mailbox/trainer/' . $trainer->getUuid() . '"><i class="fa-solid fa-paper-plane"></i></a>
                                        ' . ($this->isGranted('ROLE_TRAINER') ? '<a class="ms-2 btn btn-primary text-center" href="/' . $request->getLocale() . '/trainer/' . $trainer->getUuid() . '"><i class="fa-solid fa-eye"></i></a>' : '') . '
                                    </div>
                                </div>');
                        }
                    } else {
                        $closest = ['Désolé, je n\'ai trouvé ni stagiaire, ni formateur avec les mots-clés <b>' . $keywords . '</b>...'];
                    }
                    break;
                case $translator->trans('chatbot.keys.help', [], null, $request->getLocale()):
                default:
                    $closest = ['<ul>
                                    <li><code>/' . $translator->trans('chatbot.keys.courses') . '&nbsp;{uuid|keywords}</code><p><small>' . $translator->trans('chatbot.commands.courses') . '</small></p></li>
                                    <li><code>/' . $translator->trans('chatbot.keys.modules') . '&nbsp;{uuid|keywords}</code><p><small>' . $translator->trans('chatbot.commands.modules') . '</small></p></li>
                                    <li><code>/' . $translator->trans('chatbot.keys.users') . '&nbsp;{uuid|username}</code><p><small>' . $translator->trans('chatbot.commands.users') . '</small></p></li>
                                </ul>'];
                    break;
            }
        } else {
            $responses = [
                $translator->trans('chatbot.keys.hello', [], null, $request->getLocale()) => $translator->trans('chatbot.values.hello', [], null, $request->getLocale()),
                $translator->trans('chatbot.keys.hey', [], null, $request->getLocale()) => $translator->trans('chatbot.values.hey', [], null, $request->getLocale()),
                $translator->trans('chatbot.keys.help', [], null, $request->getLocale()) => $translator->trans('chatbot.values.help', [], null, $request->getLocale()),
                $translator->trans('chatbot.keys.courses', [], null, $request->getLocale()) => $translator->trans('chatbot.values.courses', [], null, $request->getLocale()),
                $translator->trans('chatbot.keys.goodbye', [], null, $request->getLocale()) => $translator->trans('chatbot.values.goodbye', [], null, $request->getLocale()),
            ];

            $response = $translator->trans('chatbot.didnt_understand', [], null, $request->getLocale());

            // Solution Levenshtein ++
            // tableau de mots à vérifier

            // aucune distance de trouvée pour le moment
            $shortest = -1;

            // boucle sur les mots pour trouver le plus près
            foreach ($responses as $response) {

                // calcule la distance avec le mot mis en entrée,
                // et le mot courant
                $lev = levenshtein($userMessage, $response);

                // cherche une correspondance exacte
                if ($lev == 0) {

                    // le mot le plus près est celui-ci (correspondance exacte)
                    $closest = [$response];
                    $shortest = 0;

                    // on sort de la boucle ; nous avons trouvé une correspondance exacte
                    break;
                }

                // Si la distance est plus petite que la prochaine distance trouvée
                // OU, si le prochain mot le plus près n'a pas encore été trouvé
                if ($lev <= $shortest || $shortest < 0) {
                    // définition du mot le plus près ainsi que la distance
                    $closest  = [$response];
                    $shortest = $lev;
                }
            }
            // Fin solution Levenshtein ++
        }

        return $this->json(
            [
                'success' => true,
                'messages' => $closest,
            ],
            status: Response::HTTP_OK
        );
    }

    // TODO: Manage the good internship for the document
    #[IsGranted(new Expression('is_granted("ROLE_TRAINEE")'))]
    #[Route('/send_agreement', name: 'app_send_agreement', methods: "POST")]
    public function sendAgreement(Request $request, EntityManagerInterface $entityManager, TraineeRepository $traineeRepository): Response
    {
        if ($request->isXmlHttpRequest()) {
            $file = $request->files->get('file');

            if ($file) {
                if ($file->getSize() <= 52428800) {
                    if ($file->getMimeType() == 'application/pdf' || $file->getMimeType() == 'application/x-pdf') {
                        $trainee = $traineeRepository->findOneBy(['username' => $this->getUser()->getUserIdentifier()]);
                        $nomFichier = "Convention_de_stage_" . strtoupper(str_replace(" ", "-", $trainee->getLastName())) . "_" . ucfirst(str_replace(" ", "-", $trainee->getFirstName())) . '.' . $file->guessExtension();
                        try {
                            $file->move($this->getParameter('internships_directory') . "/tmp", $nomFichier);
                            $this->addFlash('info', 'Convention de stage envoyée');
                            $documents = json_decode($trainee->getDocuments(), true);
                            $documents['internships'][0]['agreement'] = 2;
                            $trainee->setDocuments(json_encode($documents));
                            $entityManager->persist($trainee);

                            $notification = new Notification();
                            $notification->setOrigin($this->getUser()->getUserIdentifier());
                            $notification->setMessage("convention");
                            $notification->setLink("/../internships/tmp/" . $nomFichier);
                            $notification->setCategory("new_internship");
                            $notification->setDate(new \DateTimeImmutable());
                            $notification->setUser($trainee->getCohort()->getTrainer());
                            $entityManager->persist($notification);

                            $entityManager->flush();
                        } catch (FileException $e) {
                            $this->addFlash('danger', 'Erreur lors de l\'envoi de la convention: ' . $e->getMessage());
                        }
                        return $this->json(
                            [
                                'success' => true,
                                'message' => "Le fichier a été envoyé avec succès !",
                            ],
                            status: Response::HTTP_OK
                        );
                    }
                    return $this->json(
                        [
                            'success' => false,
                            'message' => "Le fichier n'est pas un fichier PDF...",
                        ],
                        status: Response::HTTP_BAD_REQUEST
                    );
                }
                return $this->json(
                    [
                        'success' => false,
                        'message' => "Le fichier ne doit pas dépasser 50Mo... (" . $file->getSize() . " octets)",
                    ],
                    status: Response::HTTP_BAD_REQUEST
                );
            }
            return $this->json(
                [
                    'success' => false,
                    'message' => "Le fichier ne semble pas avoir été téléchargé correctement...",
                ],
                status: Response::HTTP_BAD_REQUEST
            );
        }
        return $this->json(
            [
                'success' => false,
                'message' => "Veuillez réessayer plus tard...",
            ],
            status: Response::HTTP_NOT_FOUND
        );
    }
    #[IsGranted(new Expression('is_granted("ROLE_TRAINEE")'))]
    #[Route('/send_certificate', name: 'app_send_certificate', methods: "POST")]
    public function sendCertificate(Request $request, EntityManagerInterface $entityManager, TraineeRepository $traineeRepository): Response
    {
        if ($request->isXmlHttpRequest()) {
            $file = $request->files->get('file');

            if ($file) {
                if ($file->getSize() <= 52428800) {
                    if ($file->getMimeType() == 'application/pdf' || $file->getMimeType() == 'application/x-pdf') {
                        $trainee = $traineeRepository->findOneBy(['username' => $this->getUser()->getUserIdentifier()]);
                        $nomFichier = "Attestation_de_stage_" . strtoupper(str_replace(" ", "-", $trainee->getLastName())) . "_" . ucfirst(str_replace(" ", "-", $trainee->getFirstName())) . '.' . $file->guessExtension();
                        try {
                            $file->move($this->getParameter('internships_directory') . "/tmp", $nomFichier);
                            $this->addFlash('info', 'Attestation de stage envoyée');
                            $documents = json_decode($trainee->getDocuments(), true);
                            $documents['internships'][0]['certificate'] = 2;
                            $trainee->setDocuments(json_encode($documents));
                            $entityManager->persist($trainee);

                            $notification = new Notification();
                            $notification->setOrigin($this->getUser()->getUserIdentifier());
                            $notification->setMessage("attestation");
                            $notification->setLink("/../internships/tmp/" . $nomFichier);
                            $notification->setCategory("new_internship");
                            $notification->setDate(new \DateTimeImmutable());
                            $notification->setUser($trainee->getCohort()->getTrainer());
                            $entityManager->persist($notification);

                            $entityManager->flush();
                        } catch (FileException $e) {
                            $this->addFlash('danger', 'Erreur lors de l\'envoi de l\'attestation de stage: ' . $e->getMessage());
                        }
                        return $this->json(
                            [
                                'success' => true,
                                'message' => "Le fichier a été envoyé avec succès !",
                            ],
                            status: Response::HTTP_OK
                        );
                    }
                    return $this->json(
                        [
                            'success' => false,
                            'message' => "Le fichier n'est pas un fichier PDF...",
                        ],
                        status: Response::HTTP_BAD_REQUEST
                    );
                }
                return $this->json(
                    [
                        'success' => false,
                        'message' => "Le fichier ne doit pas dépasser 50Mo... (" . $file->getSize() . " octets)",
                    ],
                    status: Response::HTTP_BAD_REQUEST
                );
            }
            return $this->json(
                [
                    'success' => false,
                    'message' => "Le fichier ne semble pas avoir été téléchargé correctement...",
                ],
                status: Response::HTTP_BAD_REQUEST
            );
        }
        return $this->json(
            [
                'success' => false,
                'message' => "Veuillez réessayer plus tard...",
            ],
            status: Response::HTTP_NOT_FOUND
        );
    }

    #[IsGranted(new Expression('is_granted("ROLE_TRAINEE")'))]
    #[Route('/send_evaluation', name: 'app_send_evaluation', methods: "POST")]
    public function sendEvaluation(Request $request, EntityManagerInterface $entityManager, TraineeRepository $traineeRepository): Response
    {
        if ($request->isXmlHttpRequest()) {
            $file = $request->files->get('file');

            if ($file) {
                if ($file->getSize() <= 52428800) {
                    if ($file->getMimeType() == 'application/pdf' || $file->getMimeType() == 'application/x-pdf') {
                        $trainee = $traineeRepository->findOneBy(['username' => $this->getUser()->getUserIdentifier()]);
                        $nomFichier = "Evaluation_de_stage_" . strtoupper(str_replace(" ", "-", $trainee->getLastName())) . "_" . ucfirst(str_replace(" ", "-", $trainee->getFirstName())) . '.' . $file->guessExtension();
                        try {
                            $file->move($this->getParameter('internships_directory') . "/tmp", $nomFichier);
                            $this->addFlash('info', 'Évaluation de stage envoyée');
                            $documents = json_decode($trainee->getDocuments(), true);
                            $documents['internships'][0]['evaluation'] = 2;
                            $trainee->setDocuments(json_encode($documents));
                            $entityManager->persist($trainee);

                            $notification = new Notification();
                            $notification->setOrigin($this->getUser()->getUserIdentifier());
                            $notification->setMessage("evaluation");
                            $notification->setLink("/../internships/tmp/" . $nomFichier);
                            $notification->setCategory("new_internship");
                            $notification->setDate(new \DateTimeImmutable());
                            $notification->setUser($trainee->getCohort()->getTrainer());
                            $entityManager->persist($notification);

                            $entityManager->flush();
                        } catch (FileException $e) {
                            $this->addFlash('danger', 'Erreur lors de l\'envoi de l\'évaluation: ' . $e->getMessage());
                        }
                        return $this->json(
                            [
                                'success' => true,
                                'message' => "Le fichier a été envoyé avec succès !",
                            ],
                            status: Response::HTTP_OK
                        );
                    }
                    return $this->json(
                        [
                            'success' => false,
                            'message' => "Le fichier n'est pas un fichier PDF...",
                        ],
                        status: Response::HTTP_BAD_REQUEST
                    );
                }
                return $this->json(
                    [
                        'success' => false,
                        'message' => "Le fichier ne doit pas dépasser 50Mo... (" . $file->getSize() . " octets)",
                    ],
                    status: Response::HTTP_BAD_REQUEST
                );
            }
            return $this->json(
                [
                    'success' => false,
                    'message' => "Le fichier ne semble pas avoir été téléchargé correctement...",
                ],
                status: Response::HTTP_BAD_REQUEST
            );
        }
        return $this->json(
            [
                'success' => false,
                'message' => "Veuillez réessayer plus tard...",
            ],
            status: Response::HTTP_NOT_FOUND
        );
    }

    #[IsGranted(new Expression('is_granted("ROLE_TRAINER") or is_granted("ROLE_TRAINEE")'))]
    #[Route('/send_message', name: 'app_send_message', methods: "POST")]
    public function sendMessage(Request $request, UserRepository $userRepository, CohortRepository $cohortRepository, MessageRepository $messageRepository, EntityManagerInterface $entityManager): Response
    {
        $notificationNewMessage = new Notification();
        $notificationNewMessage->setDate(new \DateTimeImmutable());
        $notificationNewMessage->setCategory("new_message");
        $notificationNewMessage->setOrigin($this->getUser()->getUserIdentifier());
        $notificationNewMessage->setMessage($this->getUser()->getUserIdentifier());

        $message = new Message();
        $message->setContent($request->request->get('form_message'));
        $message->setDate(new \DateTimeImmutable());
        if($request->request->get('form_original_message') !== null && !empty($request->request->get('form_original_message'))) {
            $message->setOriginalMessage($messageRepository->find($request->request->get('form_original_message')));
        } else {
            $message->setOriginalMessage(null);
        }

        if ($this->isGranted("ROLE_TRAINER")) {
            $message->setSendTrainer($this->getUser());

            $notificationNewMessage->setLink($this->generateUrl('app_mailbox_trainer', ['uuid' => $request->request->get('form_sender_uuid')]), true);
        } elseif ($this->isGranted("ROLE_TRAINEE")) {
            $message->setSendTrainee($this->getUser());

            $notificationNewMessage->setLink($this->generateUrl('app_mailbox_trainee', ['uuid' => $request->request->get('form_sender_uuid')]), true);
        }

        if (!empty($request->request->get('form_origin')) && $request->request->get('form_origin') == "cohort") {
            $cohort = $cohortRepository->findOneBy(['uuid' => $request->request->get('form_receiver_uuid')]);
            $message->setCohort($cohort);

            $cohortTrainees = $cohort->getTrainees();
            foreach ($cohortTrainees as $cohortTrainee) {
                $notificationNewMessage = new Notification();
                $notificationNewMessage->setDate(new \DateTimeImmutable());
                $notificationNewMessage->setCategory("new_message");
                $notificationNewMessage->setOrigin($this->getUser()->getUserIdentifier());
                $notificationNewMessage->setUser($cohortTrainee);
                $notificationNewMessage->setMessage($cohort->getName());
                $notificationNewMessage->setLink($this->generateUrl('app_mailbox_cohort', ['uuid' => $cohort->getUuid()]), true);
                $entityManager->persist($notificationNewMessage);
            }
        } elseif ((!empty($request->request->get('form_origin')) && $request->request->get('form_origin') == "trainee")) {
            $trainee = $userRepository->findOneBy(['uuid' => $request->request->get('form_receiver_uuid')]);
            $message->setTrainee($trainee);

            $notificationNewMessage->setUser($trainee);
        } elseif ((!empty($request->request->get('form_origin')) && $request->request->get('form_origin') == "trainer")) {
            $trainer = $userRepository->findOneBy(['uuid' => $request->request->get('form_receiver_uuid')]);
            $message->setTrainer($trainer);

            $notificationNewMessage->setUser($trainer);
        }
        $message->setContent($request->request->get('form_message'));

        $entityManager->persist($message);
        $entityManager->persist($notificationNewMessage);
        $entityManager->flush();

        // Get the referer URL from the request headers
        $referer = $request->headers->get('referer');

        // If the referer is not available, you can set a default route
        if ($referer) {
            return $this->redirect($referer);
        } else {
            return $this->redirectToRoute('app_mailbox');
        }
    }

    #[IsGranted(new Expression('is_granted("ROLE_TRAINEE")'))]
    #[Route('/send_tp', name: 'app_send_tp', methods: "POST")]
    public function sendTp(Request $request, SluggerInterface $slugger, EntityManagerInterface $entityManager, CourseResourceRepository $courseResourceRepository, NotificationRepository $notificationRepository, UserRepository $userRepository): Response
    {
        if ($request->isXmlHttpRequest()) {
            $file = $request->files->get('file');

            if ($file) {
                if ($file->getSize() <= 52428800) {
                    if (
                        $file->getMimeType() == 'application/pdf' ||
                        $file->getMimeType() == 'application/x-pdf' ||
                        $file->getMimeType() == 'application/x-rar-compressed' ||
                        $file->getMimeType() == 'application/x-tar' ||
                        $file->getMimeType() == 'application/zip' ||
                        $file->getMimeType() == 'application/x-zip-compressed' ||
                        $file->getMimeType() == 'application/x-7z-compressed'
                    ) {
                        $nomFichier = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
                        $nomFichier = $slugger->slug($nomFichier);
                        $nomFichier = $nomFichier . '-' . uniqid() . '.' . $file->guessExtension();
                        try {
                            $file->move($this->getParameter('homeworks_directory') . '/' . $this->getUser()->getUserIdentifier(), $nomFichier);
                            $traineeResource = new TraineeResource();
                            $traineeResource->setLabel($nomFichier);
                            $courseResource = $courseResourceRepository->find($request->request->get('tp_id'));
                            $traineeResource->setCourseResource($courseResource);
                            $traineeResource->setTrainee($this->getUser());
                            $entityManager->persist($traineeResource);
                            $entityManager->flush();

                            $currentUser = $userRepository->findOneBy(["username" => $this->getUser()->getUserIdentifier()]);
                            $notificationRepository->deleteANotification($courseResource->getCourse()->getModule()->getLabel(), null, "homework_to_do", $currentUser->getId());

                            $this->addFlash('notice', 'Travail envoyé');
                            return $this->json(
                                [
                                    'success' => true,
                                    'message' => "Le fichier a été envoyé avec succès !",
                                ],
                                status: Response::HTTP_OK
                            );
                        } catch (FileException $e) {
                            $this->addFlash('danger', 'Erreur lors de l\'envoi du travail: ' . $e->getMessage());
                        }
                        return $this->json(
                            [
                                'success' => false,
                                'message' => "Erreur lors de l\'envoi du travail",
                            ],
                            status: Response::HTTP_OK
                        );
                    }
                    $this->addFlash('danger', "Le fichier n'est pas un fichier PDF...");
                    return $this->json(
                        [
                            'success' => false,
                            'message' => "Le fichier n'est pas un fichier PDF...",
                        ],
                        status: Response::HTTP_BAD_REQUEST
                    );
                }
                $this->addFlash('danger', "Le fichier ne doit pas dépasser 50Mo... (" . $file->getSize() . " octets)");
                return $this->json(
                    [
                        'success' => false,
                        'message' => "Le fichier ne doit pas dépasser 50Mo... (" . $file->getSize() . " octets)",
                    ],
                    status: Response::HTTP_BAD_REQUEST
                );
            }
            $this->addFlash('danger', "Le fichier ne semble pas avoir été téléchargé correctement...");
            return $this->json(
                [
                    'success' => false,
                    'message' => "Le fichier ne semble pas avoir été téléchargé correctement...",
                ],
                status: Response::HTTP_BAD_REQUEST
            );
        }
        $this->addFlash('danger', "Veuillez réessayer plus tard...");
        return $this->json(
            [
                'success' => false,
                'message' => "Veuillez réessayer plus tard...",
            ],
            status: Response::HTTP_NOT_FOUND
        );
    }

    #[IsGranted(new Expression('is_granted("ROLE_TRAINEE")'))]
    #[Route('/save_course_to_favorites/{course}', name: 'app_add_course_favorite', methods: "POST")]
    public function saveCourseToFavorites(Request $request, EntityManagerInterface $entityManager, TraineeRepository $traineeRepository, CourseRepository $courseRepository, string $course): Response
    {
        if ($request->isXmlHttpRequest()) {
            $course = $courseRepository->findOneBy(['link' => $course]);
            if($course instanceof Course) {
                $favorite = new TraineeCourseFavorite();
                $favorite->setCourse($course);
                $favorite->setTrainee($traineeRepository->findOneBy(["username" => $this->getUser()->getUserIdentifier()]));
                $entityManager->persist($favorite);
                $entityManager->flush();
                $this->addFlash('notice', "Le cours a été supprimé de vos favoris !");          
                return $this->json(
                    [
                        'success' => true,
                        'message' => "Le cours a été ajouté à vos favoris !",
                    ],
                    status: Response::HTTP_OK
                );
            }
            $this->addFlash('danger', "Le cours n'existe pas...");
            return $this->json(
                [
                    'success' => false,
                    'message' => "Le cours n'existe pas...",
                ],
                status: Response::HTTP_BAD_REQUEST
            );
        }
        $this->addFlash('danger', "Veuillez réessayer plus tard...");
        return $this->json(
            [
                'success' => false,
                'message' => "Veuillez réessayer plus tard...",
            ],
            status: Response::HTTP_NOT_FOUND
        );
    }

    #[IsGranted(new Expression('is_granted("ROLE_TRAINEE")'))]
    #[Route('/remove_course_from_favorites/{course}', name: 'app_remove_course_favorite', methods: "POST")]
    public function removeCourseFromFavorites(Request $request, EntityManagerInterface $entityManager, TraineeCourseFavoriteRepository $traineeCourseFavoriteRepository, TraineeRepository $traineeRepository, CourseRepository $courseRepository, string $course): Response
    {
        if ($request->isXmlHttpRequest()) {
            $course = $courseRepository->findOneBy(['link' => $course]);
            if($course instanceof Course) {
                $favorite = $traineeCourseFavoriteRepository->findOneBy(["course" => $course, "trainee" => $traineeRepository->findOneBy(["username" => $this->getUser()->getUserIdentifier()])]);
                $entityManager->remove($favorite);
                $entityManager->flush();
                $this->addFlash('notice', "Le cours a été supprimé de vos favoris !");
                return $this->json(
                    [
                        'success' => true,
                        'message' => "Le cours a été supprimé de vos favoris !",
                    ],
                    status: Response::HTTP_OK
                );
            }
            $this->addFlash('danger', "Le cours n'existe pas...");
            return $this->json(
                [
                    'success' => false,
                    'message' => "Le cours n'existe pas...",
                ],
                status: Response::HTTP_BAD_REQUEST
            );
        }
        $this->addFlash('danger', "Veuillez réessayer plus tard...");
        return $this->json(
            [
                'success' => false,
                'message' => "Veuillez réessayer plus tard...",
            ],
            status: Response::HTTP_NOT_FOUND
        );
    }

    #[IsGranted(new Expression('is_granted("ROLE_TRAINEE")'))]
    #[Route('/save_completed_tutorial', name: 'app_save_completed_tutorial', methods: "POST")]
    public function saveCompletedTutorial(Request $request, EntityManagerInterface $entityManager, TraineeRepository $traineeRepository): Response
    {
        if ($request->isXmlHttpRequest()) {
            $tutorials = $request->request->get('tours');
            $trainee = $traineeRepository->findOneBy(['username' => $this->getUser()->getUserIdentifier()]);
            $trainee->setTutorialCompleted($tutorials);
            $entityManager->persist($trainee);
            $entityManager->flush();
            return $this->json(
                [
                    'success' => true,
                    'message' => "Le tutoriel a été marqué comme terminé !",
                ],
                status: Response::HTTP_OK
            );
        }
        $this->addFlash('danger', "Une erreur s'est produite...");
        return $this->json(
            [
                'success' => false,
                'message' => "Une erreur s'est produite...",
            ],
            status: Response::HTTP_NOT_FOUND
        );
    }
}
